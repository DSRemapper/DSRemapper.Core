<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DSRemapper.Core</name>
    </assembly>
    <members>
        <member name="T:DSRemapper.Core.RemapperEventType">
            <summary>
            Enumeration of the Remappers message types
            </summary>
        </member>
        <member name="F:DSRemapper.Core.RemapperEventType.DeviceConsole">
            <summary>
            Shows the message to the device console of the program
            </summary>
        </member>
        <member name="F:DSRemapper.Core.RemapperEventType.Warning">
            <summary>
            Shows the message as a warning message on the debug console of the program
            </summary>
        </member>
        <member name="F:DSRemapper.Core.RemapperEventType.Error">
            <summary>
            Shows the message as a error message on the debug console of the program
            </summary>
        </member>
        <member name="T:DSRemapper.Core.RemapperEventArgs">
            <summary>
            Delegate for Remappers message events
            </summary>
            <param name="type">The type of the current message</param>
            <param name="message">A string containing the message sent by the Remapper object</param>
        </member>
        <member name="T:DSRemapper.Core.RemapperAttribute">
            <summary>
            Attribute to bind Remappers to their corresponding file extensions
            </summary>
        </member>
        <member name="P:DSRemapper.Core.RemapperAttribute.FileExt">
            <summary>
            The extension of the file referenced by this attribute
            </summary>
        </member>
        <member name="M:DSRemapper.Core.RemapperAttribute.#ctor(System.String)">
            <summary>
            RemapperAttribute class contructor
            </summary>
            <param name="fileExt">The file extension (without the dot) binded to the Remapper class</param>
        </member>
        <member name="T:DSRemapper.Core.EmulatedControllerAttribute">
            <summary>
            An attribute to reference a emulated controller with a unique id/path to instance it.
            </summary>
        </member>
        <member name="P:DSRemapper.Core.EmulatedControllerAttribute.DevicePath">
            <summary>
            Gets/Sets the virtual device id/path
            </summary>
        </member>
        <member name="P:DSRemapper.Core.EmulatedControllerAttribute.IsGlobal">
            <summary>
            Gets/Sets if the controller is global or not
            </summary>
        </member>
        <member name="M:DSRemapper.Core.EmulatedControllerAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            EmulatedControllerAttribute class contructor
            </summary>
            <param name="path">The id/path for the emulated controller</param>
            <param name="isGlobal">If is true the emulated controller will not be referenced to a specific Remapper (default value: false) [still not implemented]</param>
        </member>
        <member name="T:DSRemapper.Core.IDSInputDeviceInfo">
            <summary>
            A standard interface for device informations handled by DSRemapper
            </summary>
        </member>
        <member name="P:DSRemapper.Core.IDSInputDeviceInfo.Id">
            <summary>
            Unique id for the device referenced by this interface.
            </summary>
        </member>
        <member name="P:DSRemapper.Core.IDSInputDeviceInfo.Name">
            <summary>
            Friendly name for the device referenced by this interface.
            </summary>
        </member>
        <member name="M:DSRemapper.Core.IDSInputDeviceInfo.CreateController">
            <summary>
            Creates a IDSInputController that references the physical controller referenced by this interface.
            Works as a shortcut to the corresponding controller constructor to simplify the program code.
            </summary>
            <returns>A initialized IDSInputController object</returns>
        </member>
        <member name="M:DSRemapper.Core.IDSInputDeviceInfo.ToString">
            <summary>
            Returns de device name and id as a string with a default format.
            </summary>
            <returns>A string with device name and id</returns>
        </member>
        <member name="T:DSRemapper.Core.IDSDeviceScanner">
            <summary>
            A standard Device Scanner interface for DSRemapper
            </summary>
        </member>
        <member name="M:DSRemapper.Core.IDSDeviceScanner.ScanDevices">
            <summary>
            Returns an array with the information of connected devices for a specific plugin or controller type.
            </summary>
            <returns>An array of IDSInputDeviceInfo objects</returns>
        </member>
        <member name="T:DSRemapper.Core.IDSInputController">
            <summary>
            Standard input controller of DSRemapper
            </summary>
        </member>
        <member name="P:DSRemapper.Core.IDSInputController.Id">
            <summary>
            Gets the controller Id
            </summary>
        </member>
        <member name="P:DSRemapper.Core.IDSInputController.Name">
            <summary>
            Gets the controller name
            </summary>
        </member>
        <member name="P:DSRemapper.Core.IDSInputController.Type">
            <summary>
            Gets the controller type
            </summary>
        </member>
        <member name="P:DSRemapper.Core.IDSInputController.IsConnected">
            <summary>
            Gets if the controller is currently connected
            </summary>
        </member>
        <member name="M:DSRemapper.Core.IDSInputController.Connect">
            <summary>
            Connects the controller to start reading and writing from/to it
            </summary>
        </member>
        <member name="M:DSRemapper.Core.IDSInputController.Disconnect">
            <summary>
            Disconnects the controller from DSRemapper
            </summary>
        </member>
        <member name="M:DSRemapper.Core.IDSInputController.GetInputReport">
            <summary>
            Gets the input state of the controller, which includes axes positions, buttons, etc.
            </summary>
            <returns>A standard DSRemapper input report</returns>
        </member>
        <member name="M:DSRemapper.Core.IDSInputController.SendOutputReport(DSRemapper.Types.DSOutputReport)">
            <summary>
            Sets the output state of a controller sending information about vibration, force feedback, etc.
            </summary>
            <param name="report">A standard DSRemapper output report with the information for the controller</param>
        </member>
        <member name="T:DSRemapper.Core.IDSOutputController">
            <summary>
            Standard interface for DSRemapper emulated controllers
            </summary>
        </member>
        <member name="P:DSRemapper.Core.IDSOutputController.IsConnected">
            <summary>
            Gets if the emulated controller is connected and updating it's data
            </summary>
        </member>
        <member name="P:DSRemapper.Core.IDSOutputController.State">
            <summary>
            Gets the state structure of the emulated controller
            </summary>
        </member>
        <member name="M:DSRemapper.Core.IDSOutputController.Connect">
            <summary>
            Default Connect function to connect the emulated controller
            </summary>
        </member>
        <member name="M:DSRemapper.Core.IDSOutputController.Disconnect">
            <summary>
            Disconnects the emulated controller
            </summary>
        </member>
        <member name="M:DSRemapper.Core.IDSOutputController.Update">
            <summary>
            Updates the emulated controller values using the state property values
            </summary>
        </member>
        <member name="M:DSRemapper.Core.IDSOutputController.GetFeedbackReport">
            <summary>
            Gets the current state of the feedback sended to the emulated controller from the computer
            </summary>
            <returns>A standard DSRemapper output report</returns>
        </member>
        <member name="M:DSRemapper.Core.IDSOutputController.CustomFunc(System.String,System.Object[])">
            <summary>
            Implementation for custom user defined functions.
            Created to implement needed functions not suported by the interface.
            Override for custom implementation, default implementation use reflection.
            </summary>
            <param name="funcName">Name of custom function</param>
            <param name="args">Optional arguments for the custom function</param>
        </member>
        <member name="T:DSRemapper.Core.IDSRemapper">
            <summary>
            Standard interface for DSRemapper remappers
            </summary>
        </member>
        <member name="E:DSRemapper.Core.IDSRemapper.OnLog">
            <summary>
            Occurs when the remapper raise a message.
            </summary>
        </member>
        <member name="M:DSRemapper.Core.IDSRemapper.SetScript(System.String)">
            <summary>
            Sets the script for the remapper setting it up to start remapping the controller
            </summary>
            <param name="file">File path to the Remap Profile file</param>
        </member>
        <member name="M:DSRemapper.Core.IDSRemapper.Remap(DSRemapper.Types.DSInputReport)">
            <summary>
            Main remap function of a Remapper class. This funciton is called every time the program needs to update the emulated controllers.
            </summary>
            <param name="report">Standard DSRemapper input report with the state of physical controller</param>
            <returns>Standard DSRemapper output report with the feedback state for the physical controller</returns>
        </member>
        <member name="T:DSRemapper.Core.DSPaths">
            <summary>
            A class containing all the important folder paths for DSRemapper
            </summary>
        </member>
        <member name="F:DSRemapper.Core.DSPaths.ProgramPath">
            <summary>
            Executing folder of the DSRemapper app
            </summary>
        </member>
        <member name="F:DSRemapper.Core.DSPaths.PluginsPath">
            <summary>
            Folder containing all the DSRemapper plugins
            </summary>
        </member>
        <member name="F:DSRemapper.Core.DSPaths.InputPluginsPath">
            <summary>
            Folder containing DSRemapper input plugins (exists for ordering purposes, there may be other plugins types)
            </summary>
        </member>
        <member name="F:DSRemapper.Core.DSPaths.OutputPluginsPath">
            <summary>
            Folder containing DSRemapper output plugins (exists for ordering purposes, there may be other plugins types)
            </summary>
        </member>
        <member name="F:DSRemapper.Core.DSPaths.RemapperPluginsPath">
            <summary>
            Folder containing DSRemapper remapper plugins (exists for ordering purposes, there may be other plugins types)
            </summary>
        </member>
        <member name="F:DSRemapper.Core.DSPaths.FolderPath">
            <summary>
            DSRemapper folder located inside users document folder (contains app and plugins configurations and remap profiles)
            </summary>
        </member>
        <member name="F:DSRemapper.Core.DSPaths.ProfilesPath">
            <summary>
            Folder containing all remap profiles recogniced by the app.
            </summary>
        </member>
        <member name="F:DSRemapper.Core.DSPaths.ConfigPath">
            <summary>
            Folder containing DSRemapper app settings.
            </summary>
        </member>
        <member name="M:DSRemapper.Core.DSPaths.#cctor">
            <summary>
            Static constructor that creates all folders if they doesn't exist, to prevent errors.
            </summary>
        </member>
        <member name="T:DSRemapper.DSLogger.LogLevel">
            <summary>
            Enumeration of log types for the DSRemapper Logger
            </summary>
        </member>
        <member name="F:DSRemapper.DSLogger.LogLevel.Message">
            <summary>
            Mark the log entry as a message
            </summary>
        </member>
        <member name="F:DSRemapper.DSLogger.LogLevel.Warning">
            <summary>
            Mark the log entry as a warning
            </summary>
        </member>
        <member name="F:DSRemapper.DSLogger.LogLevel.Error">
            <summary>
            Mark the log entry as an error
            </summary>
        </member>
        <member name="T:DSRemapper.DSLogger.Logger">
            <summary>
            Logger class of DSRemapper, used for build in console log
            </summary>
        </member>
        <member name="T:DSRemapper.DSLogger.Logger.LoggerEvent">
            <summary>
            Default delegate for the log event
            </summary>
            <param name="log"></param>
        </member>
        <member name="E:DSRemapper.DSLogger.Logger.OnLog">
            <summary>
            Occurs when a log function is called
            </summary>
        </member>
        <member name="P:DSRemapper.DSLogger.Logger.Subcribers">
            <summary>
            Gets the number of subscriptors to the 'OnLog' event. For debug purposes.
            </summary>
        </member>
        <member name="T:DSRemapper.DSLogger.Logger.LogEntry">
            <summary>
            Structure of a log entry
            </summary>
        </member>
        <member name="F:DSRemapper.DSLogger.Logger.LogEntry.Level">
            <summary>
            Level/type of the log
            </summary>
        </member>
        <member name="F:DSRemapper.DSLogger.Logger.LogEntry.Message">
            <summary>
            Content of the log entry
            </summary>
        </member>
        <member name="M:DSRemapper.DSLogger.Logger.LogEntry.#ctor(System.String,DSRemapper.DSLogger.LogLevel)">
            <summary>
            LogEntry struct constructor
            </summary>
            <param name="message">String containing the log content</param>
            <param name="level">Level/type of the log entry</param>
        </member>
        <member name="M:DSRemapper.DSLogger.Logger.LogEntry.ToString">
            <summary>
            XML/HTML to string conversion for the structure
            </summary>
            <returns></returns>
        </member>
        <member name="F:DSRemapper.DSLogger.Logger.logs">
            <summary>
            List containing all the log of the app. Used to restore old log entries on the console.
            There has to be a better way, but until I implement it, this works.
            </summary>
        </member>
        <member name="M:DSRemapper.DSLogger.Logger.Log(System.String)">
            <summary>
            Logs a message to the DSRemapper Logger
            </summary>
            <param name="message">Content of the log</param>
        </member>
        <member name="M:DSRemapper.DSLogger.Logger.LogWarning(System.String)">
            <summary>
            Logs a warning to the DSRemapper Logger
            </summary>
            <param name="message">Content of the log</param>
        </member>
        <member name="M:DSRemapper.DSLogger.Logger.LogError(System.String)">
            <summary>
            Logs a error to the DSRemapper Logger
            </summary>
            <param name="message">Content of the log</param>
        </member>
        <member name="M:DSRemapper.DSLogger.Logger.PrintLogOnConsole">
            <summary>
            Prints all the stored log on the windows console (if it is visible)
            </summary>
        </member>
        <member name="M:DSRemapper.DSLogger.Logger.GetXmlLog">
            <summary>
            Gets all the logs as a XML string array
            </summary>
            <returns>An string array containing all the logs in the XML form</returns>
        </member>
        <member name="T:DSRemapper.DSMath.DSVector2">
            <summary>
            Represents a vector with two single-precision floating-point values.
            Used on DSRemapper SixAxis calculations
            </summary>
        </member>
        <member name="P:DSRemapper.DSMath.DSVector2.X">
            <inheritdoc cref="F:System.Numerics.Vector2.X"/>
        </member>
        <member name="P:DSRemapper.DSMath.DSVector2.Y">
            <inheritdoc cref="F:System.Numerics.Vector2.Y"/>
        </member>
        <member name="P:DSRemapper.DSMath.DSVector2.Length">
            <summary>
            Gets the length of the vector.
            </summary>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector2.#ctor">
            <summary>
            Creates a new DSVector2 object whose two elements are 0.
            </summary>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector2.#ctor(System.Single)">
            <summary>
            Creates a new <see cref="T:System.Numerics.Vector2" /> object whose two elements have the same value.
            </summary>
            <param name="value">The value to assign to both elements.</param>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector2.#ctor(System.Single,System.Single)">
            <summary>Creates a vector whose elements have the specified values.</summary>
            <param name="x">The value to assign to the <see cref="P:DSRemapper.DSMath.DSVector2.X" /> property.</param>
            <param name="y">The value to assign to the <see cref="P:DSRemapper.DSMath.DSVector2.Y" /> property.</param>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector2.op_Implicit(DSRemapper.DSMath.DSVector2)~System.Numerics.Vector2">
            <summary>
            Conversion from DSVector2 to System.Numerics.Vector2
            </summary>
            <param name="vector">A DSVector2 to convert to System.Numerics.Vector2</param>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector2.op_Implicit(System.Numerics.Vector2)~DSRemapper.DSMath.DSVector2">
            <summary>
            Conversion from System.Numerics.Vector2 to DSVector2
            </summary>
            <param name="vector">A System.Numerics.Vector2 to convert to DSVector2</param>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector2.op_Addition(DSRemapper.DSMath.DSVector2,DSRemapper.DSMath.DSVector2)">
            <inheritdoc cref="M:System.Numerics.Vector2.op_Addition(System.Numerics.Vector2,System.Numerics.Vector2)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector2.op_Subtraction(DSRemapper.DSMath.DSVector2,DSRemapper.DSMath.DSVector2)">
            <inheritdoc cref="M:System.Numerics.Vector2.op_Subtraction(System.Numerics.Vector2,System.Numerics.Vector2)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector2.op_Multiply(DSRemapper.DSMath.DSVector2,DSRemapper.DSMath.DSVector2)">
            <inheritdoc cref="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Numerics.Vector2)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector2.op_Division(DSRemapper.DSMath.DSVector2,DSRemapper.DSMath.DSVector2)">
            <inheritdoc cref="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Numerics.Vector2)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector2.op_Multiply(DSRemapper.DSMath.DSVector2,System.Single)">
            <inheritdoc cref="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Single)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector2.op_Division(DSRemapper.DSMath.DSVector2,System.Single)">
            <inheritdoc cref="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Single)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector2.op_Multiply(System.Single,DSRemapper.DSMath.DSVector2)">
            <inheritdoc cref="M:DSRemapper.DSMath.DSVector2.op_Multiply(DSRemapper.DSMath.DSVector2,System.Single)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector2.op_Division(System.Single,DSRemapper.DSMath.DSVector2)">
            <inheritdoc cref="M:DSRemapper.DSMath.DSVector2.op_Division(DSRemapper.DSMath.DSVector2,System.Single)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector2.op_UnaryNegation(DSRemapper.DSMath.DSVector2)">
            <inheritdoc cref="M:System.Numerics.Vector2.op_UnaryNegation(System.Numerics.Vector2)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector2.Dot(DSRemapper.DSMath.DSVector2,DSRemapper.DSMath.DSVector2)">
            <inheritdoc cref="M:System.Numerics.Vector2.Dot(System.Numerics.Vector2,System.Numerics.Vector2)"/>
            <param name="left">The first vector</param>
            <param name="right">The second vector</param>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector2.Dot(DSRemapper.DSMath.DSVector2)">
            <inheritdoc cref="M:DSRemapper.DSMath.DSVector2.Dot(DSRemapper.DSMath.DSVector2,DSRemapper.DSMath.DSVector2)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector2.Normalize(DSRemapper.DSMath.DSVector2)">
            <inheritdoc cref="M:System.Numerics.Vector2.Normalize(System.Numerics.Vector2)"/>
            <param name="vector">The vector to normalize.</param>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector2.Normalize">
            <inheritdoc cref="M:DSRemapper.DSMath.DSVector2.Normalize(DSRemapper.DSMath.DSVector2)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector2.ToString">
            <inheritdoc/>
        </member>
        <member name="T:DSRemapper.DSMath.DSVector3">
            <summary>
            Represents a vector with three single-precision floating-point values.
            Used on DSRemapper SixAxis calculations
            </summary>
        </member>
        <member name="P:DSRemapper.DSMath.DSVector3.X">
            <inheritdoc cref="F:System.Numerics.Vector3.X"/>
        </member>
        <member name="P:DSRemapper.DSMath.DSVector3.Y">
            <inheritdoc cref="F:System.Numerics.Vector3.Y"/>
        </member>
        <member name="P:DSRemapper.DSMath.DSVector3.Z">
            <inheritdoc cref="F:System.Numerics.Vector3.Z"/>
        </member>
        <member name="P:DSRemapper.DSMath.DSVector3.Length">
            <summary>
            Gets the length of the vector.
            </summary>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector3.#ctor">
            <summary>
            Creates a new DSVector3 object whose three elements are 0.
            </summary>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector3.#ctor(System.Single)">
            <summary>
            Creates a new DSVector3 object whose three elements have the same value.
            </summary>
            <param name="value">The value to assign to all three elements.</param>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a vector whose elements have the specified values.
            </summary>
            <param name="x">The value to assign to the <see cref="P:DSRemapper.DSMath.DSVector3.X" /> property.</param>
            <param name="y">The value to assign to the <see cref="P:DSRemapper.DSMath.DSVector3.Y" /> property.</param>
            <param name="z">The value to assign to the <see cref="P:DSRemapper.DSMath.DSVector3.Z" /> property.</param>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector3.op_Implicit(DSRemapper.DSMath.DSVector3)~System.Numerics.Vector3">
            <summary>
            Conversion from DSVector3 to System.Numerics.Vector3
            </summary>
            <param name="vector">A DSVector3 to convert to System.Numerics.Vector3</param>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector3.op_Implicit(System.Numerics.Vector3)~DSRemapper.DSMath.DSVector3">
            <summary>
            Conversion from System.Numerics.Vector3 to DSVector3
            </summary>
            <param name="vector">A System.Numerics.Vector3 to convert to DSVector3</param>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector3.op_Addition(DSRemapper.DSMath.DSVector3,DSRemapper.DSMath.DSVector3)">
            <inheritdoc cref="M:System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector3.op_Subtraction(DSRemapper.DSMath.DSVector3,DSRemapper.DSMath.DSVector3)">
            <inheritdoc cref="M:System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector3.op_Multiply(DSRemapper.DSMath.DSVector3,DSRemapper.DSMath.DSVector3)">
            <inheritdoc cref="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector3.op_Division(DSRemapper.DSMath.DSVector3,DSRemapper.DSMath.DSVector3)">
            <inheritdoc cref="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector3.op_Multiply(DSRemapper.DSMath.DSVector3,System.Single)">
            <inheritdoc cref="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector3.op_Division(DSRemapper.DSMath.DSVector3,System.Single)">
            <inheritdoc cref="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector3.op_Multiply(System.Single,DSRemapper.DSMath.DSVector3)">
            <inheritdoc cref="M:DSRemapper.DSMath.DSVector3.op_Multiply(DSRemapper.DSMath.DSVector3,System.Single)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector3.op_Division(System.Single,DSRemapper.DSMath.DSVector3)">
            <inheritdoc cref="M:DSRemapper.DSMath.DSVector3.op_Division(DSRemapper.DSMath.DSVector3,System.Single)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector3.op_UnaryNegation(DSRemapper.DSMath.DSVector3)">
            <inheritdoc cref="M:System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector3.Dot(DSRemapper.DSMath.DSVector3,DSRemapper.DSMath.DSVector3)">
            <inheritdoc cref="M:System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)"/>
            <param name="left">The first vector</param>
            <param name="right">The second vector</param>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector3.Dot(DSRemapper.DSMath.DSVector3)">
            <inheritdoc cref="M:DSRemapper.DSMath.DSVector3.Dot(DSRemapper.DSMath.DSVector3,DSRemapper.DSMath.DSVector3)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector3.Cross(DSRemapper.DSMath.DSVector3,DSRemapper.DSMath.DSVector3)">
            <inheritdoc cref="M:System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)"/>
            <param name="left">The first vector</param>
            <param name="right">The second vector</param>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector3.Cross(DSRemapper.DSMath.DSVector3)">
            <inheritdoc cref="M:DSRemapper.DSMath.DSVector3.Cross(DSRemapper.DSMath.DSVector3,DSRemapper.DSMath.DSVector3)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector3.Normalize(DSRemapper.DSMath.DSVector3)">
            <inheritdoc cref="M:System.Numerics.Vector3.Normalize(System.Numerics.Vector3)"/>
            <param name="vector">The vector to normalize.</param>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector3.Normalize">
            <inheritdoc cref="M:DSRemapper.DSMath.DSVector3.Normalize(DSRemapper.DSMath.DSVector3)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSVector3.ToString">
            <inheritdoc/>
        </member>
        <member name="T:DSRemapper.DSMath.DSQuaternion">
            <summary>
            Represents a vector that is used to encode three-dimensional physical rotations.
            Used on DSRemapper SixAxis calculations
            </summary>
        </member>
        <member name="P:DSRemapper.DSMath.DSQuaternion.X">
            <inheritdoc cref="F:System.Numerics.Quaternion.X"/>
        </member>
        <member name="P:DSRemapper.DSMath.DSQuaternion.Y">
            <inheritdoc cref="F:System.Numerics.Quaternion.Y"/>
        </member>
        <member name="P:DSRemapper.DSMath.DSQuaternion.Z">
            <inheritdoc cref="F:System.Numerics.Quaternion.Z"/>
        </member>
        <member name="P:DSRemapper.DSMath.DSQuaternion.W">
            <inheritdoc cref="F:System.Numerics.Quaternion.W"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSQuaternion.#ctor">
            <summary>
            Constructs an identity quaternion.
            </summary>
        </member>
        <member name="M:DSRemapper.DSMath.DSQuaternion.#ctor(DSRemapper.DSMath.DSVector3,System.Single)">
            <summary>
            Creates a quaternion from the specified vector and rotation parts.
            </summary>
            <param name="vec">The vector part of the quaternion.</param>
            <param name="w">The rotation part of the quaternion.</param>
        </member>
        <member name="M:DSRemapper.DSMath.DSQuaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a quaternion from the specified components.
            </summary>
            <param name="x">The value to assign to the X component of the quaternion.</param>
            <param name="y">The value to assign to the Y component of the quaternion.</param>
            <param name="z">The value to assign to the Z component of the quaternion.</param>
            <param name="w">The value to assign to the W component of the quaternion.</param>
        </member>
        <member name="M:DSRemapper.DSMath.DSQuaternion.op_Implicit(DSRemapper.DSMath.DSQuaternion)~System.Numerics.Quaternion">
            <summary>
            Conversion from DSQuaternion to System.Numerics.Quaternion
            </summary>
            <param name="vector">A DSQuaternion to convert to System.Numerics.Quaternion</param>
        </member>
        <member name="M:DSRemapper.DSMath.DSQuaternion.op_Implicit(System.Numerics.Quaternion)~DSRemapper.DSMath.DSQuaternion">
            <summary>
            Conversion from System.Numerics.Quaternion to DSQuaternion
            </summary>
            <param name="vector">A System.Numerics.Quaternion to convert to DSQuaternion</param>
        </member>
        <member name="M:DSRemapper.DSMath.DSQuaternion.Dot(DSRemapper.DSMath.DSQuaternion,DSRemapper.DSMath.DSQuaternion)">
            <inheritdoc cref="M:System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSQuaternion.Dot(DSRemapper.DSMath.DSQuaternion)">
            <inheritdoc cref="M:DSRemapper.DSMath.DSQuaternion.Dot(DSRemapper.DSMath.DSQuaternion,DSRemapper.DSMath.DSQuaternion)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSQuaternion.Inverse(DSRemapper.DSMath.DSQuaternion)">
            <inheritdoc cref="M:System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSQuaternion.Inverse">
            <inheritdoc cref="M:DSRemapper.DSMath.DSQuaternion.Inverse(DSRemapper.DSMath.DSQuaternion)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSQuaternion.op_Multiply(DSRemapper.DSMath.DSQuaternion,DSRemapper.DSMath.DSQuaternion)">
            <inheritdoc cref="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)"/>
            <param name="left">The first quaternion.</param>
            <param name="right">The second quaternion.</param>
        </member>
        <member name="M:DSRemapper.DSMath.DSQuaternion.op_Multiply(DSRemapper.DSMath.DSQuaternion,DSRemapper.DSMath.DSVector3)">
            <summary>
            Rotates a DSVector3 using a DSQuaternion
            </summary>
            <param name="quat">The quaternion used for the rotation</param>
            <param name="vec">The 3D vector to rotate</param>
            <returns>A DSVector3 rotated by the rotation specified by the quaternion</returns>
        </member>
        <member name="M:DSRemapper.DSMath.DSQuaternion.op_Multiply(DSRemapper.DSMath.DSVector3,DSRemapper.DSMath.DSQuaternion)">
            <inheritdoc cref="M:DSRemapper.DSMath.DSQuaternion.op_Multiply(DSRemapper.DSMath.DSQuaternion,DSRemapper.DSMath.DSVector3)"/>
        </member>
        <member name="M:DSRemapper.DSMath.DSQuaternion.ToString">
            <inheritdoc/>
        </member>
        <member name="T:DSRemapper.SixAxis.SimpleSignalFilter">
            <summary>
            A Simple Signal Filter to minimize extreme values from IMU reads
            </summary>
        </member>
        <member name="M:DSRemapper.SixAxis.SimpleSignalFilter.#ctor">
            <summary>
            SimpleSignalFilter class contructor
            </summary>
        </member>
        <member name="M:DSRemapper.SixAxis.SimpleSignalFilter.CreateSSF">
            <summary>
            Creates a SimpleSignalFilter. Used for remap profiles to create a signal filter.
            </summary>
            <returns>A new SimpleSignalFilter</returns>
        </member>
        <member name="M:DSRemapper.SixAxis.SimpleSignalFilter.LowPass(DSRemapper.DSMath.DSVector3,System.Single)">
            <summary>
            Performs a low pass filter to eliminate high frequency noise from the IMU reads
            </summary>
            <param name="sample">The new sample value to filter</param>
            <param name="x0Strength">The percentage strength for the new sample (range: 0-1)</param>
            <returns>An interpolation of the sample without high frequency noise</returns>
        </member>
        <member name="M:DSRemapper.SixAxis.SimpleSignalFilter.LowPass(DSRemapper.DSMath.DSVector3,System.Single,System.Single)">
            <summary>
            Performs a low pass filter to eliminate high frequency noise from the IMU reads.
            Includes the last call sample to perform a better interpolation.
            </summary>
            <param name="sample">The new sample value to filter</param>
            <param name="x0Strength">The percentage strength for the new sample (range: 0-1)</param>
            <param name="x1Strength">The percentage strength for the previus sample (range: 0-1)</param>
            <returns>An interpolation of the sample without high frequency noise</returns>
        </member>
        <member name="T:DSRemapper.SixAxis.ExpMovingAverage">
            <summary>
            Exponential Moving Average class used to calculate an average of a large amount of samples without storing all the values.
            </summary>
        </member>
        <member name="P:DSRemapper.SixAxis.ExpMovingAverage.Average">
            <summary>
            Average stored by this object
            </summary>
        </member>
        <member name="M:DSRemapper.SixAxis.ExpMovingAverage.#ctor">
            <summary>
            ExpMovingAverage class constructor
            </summary>
        </member>
        <member name="M:DSRemapper.SixAxis.ExpMovingAverage.Update(System.Single,System.Int32)">
            <summary>
            Updates/Inserts a new sample to the average
            </summary>
            <param name="newValue">New sample value for the average</param>
            <param name="maxN">Max number of values that are taken into account for the average</param>
            <returns>The new average value</returns>
        </member>
        <member name="T:DSRemapper.SixAxis.ExpMovingAverageVector3">
            <summary>
            Exponential Moving Average class used to calculate an average of a large amount of 3D vector samples without storing all the values.
            </summary>
        </member>
        <member name="P:DSRemapper.SixAxis.ExpMovingAverageVector3.Average">
            <summary>
            Average value stored by this object
            </summary>
        </member>
        <member name="M:DSRemapper.SixAxis.ExpMovingAverageVector3.#ctor">
            <summary>
            ExpMovingAverageVector3 class constructor
            </summary>
        </member>
        <member name="M:DSRemapper.SixAxis.ExpMovingAverageVector3.Update(DSRemapper.DSMath.DSVector3,System.Int32)">
            <summary>
            Updates/Inserts a new sample to the average
            </summary>
            <param name="newValue">New sample value for the average</param>
            <param name="maxN">Max number of values that are taken into account for the average</param>
            <returns>The new average value</returns>
        </member>
        <member name="T:DSRemapper.SixAxis.SixAxisProcess">
            <summary>
            IMU data processor class. Performs all the calculation requiered to get all the data related to the IMU measurements
            </summary>
        </member>
        <member name="P:DSRemapper.SixAxis.SixAxisProcess.DeltaTime">
            <summary>
            Delta time used for the SixAxisProcess object to operate
            </summary>
        </member>
        <member name="F:DSRemapper.SixAxis.SixAxisProcess.deltaRotation">
            <summary>
            Delta/diference rotation from the last update
            </summary>
        </member>
        <member name="F:DSRemapper.SixAxis.SixAxisProcess.rotation">
            <summary>
            Total rotation of the IMU
            </summary>
        </member>
        <member name="F:DSRemapper.SixAxis.SixAxisProcess.Grav">
            <summary>
            Gravity vector pointing to planet center of gravity
            </summary>
        </member>
        <member name="F:DSRemapper.SixAxis.SixAxisProcess.Accel">
            <summary>
            Acceleration vector of the IMU relative to it's starting position
            </summary>
        </member>
        <member name="M:DSRemapper.SixAxis.SixAxisProcess.#ctor">
            <summary>
            SixAxisProcess class constructor
            </summary>
        </member>
        <member name="M:DSRemapper.SixAxis.SixAxisProcess.Update(DSRemapper.DSMath.DSVector3,DSRemapper.DSMath.DSVector3)">
            <summary>
            SixAxisProcess update function, updates all the values using IMU accelerometer and gyroscope
            </summary>
            <param name="accel">3D vector representing device acceleration</param>
            <param name="gyro">3D vector representing device angular velocity</param>
        </member>
        <member name="T:DSRemapper.Types.DSPov">
            <summary>
            DSPov class that represent a POV (Point Of View) control (also known as D-Pad)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSPov.Angle">
            <summary>
            Current angle (in degrees) of the POV control
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSPov.Up">
            <summary>
            Gets if the pov is poiting North/Up
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSPov.Right">
            <summary>
            Gets if the pov is poiting East/Right
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSPov.Down">
            <summary>
            Gets if the pov is poiting South/Down
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSPov.Left">
            <summary>
            Gets if the pov is poiting West/Left
            </summary>
        </member>
        <member name="M:DSRemapper.Types.DSPov.SetDSPov(System.Byte)">
            <summary>
            Auxiliar function to set pov from a 0 to 8 value (8 is 'nothing pressed')
            </summary>
            <param name="pov">A byte value within 0-8 range</param>
        </member>
        <member name="M:DSRemapper.Types.DSPov.Update">
            <summary>
            Updates the unassigned values of the POV.
            If the angle is -1, the function will calculate the angle using the buttons value. Otherwise, it will calculate the buttons using the angle value.
            </summary>
        </member>
        <member name="M:DSRemapper.Types.DSPov.CalculateAngle">
            <summary>
            Calculate the angle using the buttons value
            </summary>
        </member>
        <member name="M:DSRemapper.Types.DSPov.CalculateButtons">
            <summary>
            Calculate the buttons using the angle value
            </summary>
        </member>
        <member name="M:DSRemapper.Types.DSPov.ToString">
            <summary>
            String representation of the pressed buttons of the POV/D-Pad
            </summary>
            <returns>A string representing the buttons values of the POV</returns>
        </member>
        <member name="M:DSRemapper.Types.DSPov.ToStringAngle">
            <summary>
            String representation of the angle of the POV/D-Pad
            </summary>
            <returns>A string containing the angle in degrees</returns>
        </member>
        <member name="T:DSRemapper.Types.DSLight">
            <summary>
            DSLight class that represents the DualShock 4 light bar
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSLight.Player">
            <summary>
            Player number for Xbox controller compatibility, to get or set the player number of the controller.
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSLight.Red">
            <summary>
            Red value of the RGB of the light bar (range: 0-1)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSLight.Green">
            <summary>
            Green value of the RGB of the light bar (range: 0-1)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSLight.Blue">
            <summary>
            Blue value of the RGB of the light bar (range: 0-1)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSLight.OnTime">
            <summary>
            On time percentage for the DualShock 4 light bar (range: 0-1)
            If this property and 'OffTime' property are both 0, light bar is always on.
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSLight.OffTime">
            <summary>
            Off time percentage for the DualShock 4 light bar (range: 0-1)
            If this property and 'OnTime' property are both 0, light bar is always on.
            </summary>
        </member>
        <member name="M:DSRemapper.Types.DSLight.#ctor">
            <summary>
            DSLight class contructor
            </summary>
        </member>
        <member name="M:DSRemapper.Types.DSLight.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            DSLight class contructor
            </summary>
            <param name="red">Red value of the light bar (range: 0-1)</param>
            <param name="green">Green value of the light bar (range: 0-1)</param>
            <param name="blue">Blue value of the light bar (range: 0-1)</param>
            <param name="intensity">Global multiplier of intensity/brightness for all the color channels (RGB values)</param>
        </member>
        <member name="M:DSRemapper.Types.DSLight.SetRGB(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets all the color channels of the light bar, and applies an intesity/brightness value
            </summary>
            <param name="red">Red value of the light bar (range: 0-1)</param>
            <param name="green">Green value of the light bar (range: 0-1)</param>
            <param name="blue">Blue value of the light bar (range: 0-1)</param>
            <param name="intensity">Global multiplier of intensity for all the color channels (RGB values)</param>
        </member>
        <member name="M:DSRemapper.Types.DSLight.SetRGB(System.Single[],System.Single)">
            <summary>
            Sets all the color channels of the light bar, and applies an intesity/brightness value
            </summary>
            <param name="leds">An array, of at least, three values representing the RGB channels (each array value range: 0-1)</param>
            <param name="intensity">Global multiplier of intensity for all the color channels (RGB values)</param>
        </member>
        <member name="M:DSRemapper.Types.DSLight.op_Multiply(DSRemapper.Types.DSLight,System.Single)">
            <summary>
            Multiplies the current led color channels by an intensity/brightness value
            </summary>
            <param name="light">The DSLight class to apply the intensity</param>
            <param name="intensity">The intensity value</param>
            <returns>A new DSLight object with the intensity/brightness applied</returns>
        </member>
        <member name="M:DSRemapper.Types.DSLight.op_Multiply(System.Single,DSRemapper.Types.DSLight)">
            <inheritdoc cref="M:DSRemapper.Types.DSLight.op_Multiply(DSRemapper.Types.DSLight,System.Single)"/>
        </member>
        <member name="M:DSRemapper.Types.DSLight.op_Addition(DSRemapper.Types.DSLight,System.Single)">
            <summary>
            Adds the value to the current led color channels values
            </summary>
            <param name="light">The DSLight class to apply the intensity</param>
            <param name="add">The value to add to all color channels</param>
            <returns>A new DSLight object with the value added to all color channels</returns>
        </member>
        <member name="M:DSRemapper.Types.DSLight.op_Addition(System.Single,DSRemapper.Types.DSLight)">
            <inheritdoc cref="M:DSRemapper.Types.DSLight.op_Addition(DSRemapper.Types.DSLight,System.Single)"/>
        </member>
        <member name="M:DSRemapper.Types.DSLight.op_Subtraction(DSRemapper.Types.DSLight,System.Single)">
            <summary>
            Subtract the value to the current led color channels values
            </summary>
            <param name="light">The DSLight class to apply the intensity</param>
            <param name="sub">The value to subtracted to all color channels</param>
            <returns>A new DSLight object with the value subtracted to all color channels</returns>
        </member>
        <member name="M:DSRemapper.Types.DSLight.op_Subtraction(System.Single,DSRemapper.Types.DSLight)">
            <inheritdoc cref="M:DSRemapper.Types.DSLight.op_Subtraction(DSRemapper.Types.DSLight,System.Single)"/>
        </member>
        <member name="T:DSRemapper.Types.DSTouch">
            <summary>
            DSTouch class that represents a finger touch on a touchpad (intended for the DualShock 4 touchpad)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSTouch.Id">
            <summary>
            Current id of the touch
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSTouch.Pressed">
            <summary>
            Gets if the finger is touching the touchpad
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSTouch.Pos">
            <summary>
            A 2D vector representing the position of the finger in a range of 0-1 in both axis
            </summary>
        </member>
        <member name="M:DSRemapper.Types.DSTouch.ToString">
            <summary>
            Gets a String representation of the DSTouch class
            </summary>
            <returns>A string containing the id, if is pressed and the position of the touch</returns>
        </member>
        <member name="T:DSRemapper.Types.DSInputReport">
            <summary>
            Standardization of input report for DSRemapper plugins framework. Is used for DSRemapper remap profiles as well.
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Battery">
            <summary>
            Gets the battery level of the controller (intended for wireless controllers as DualShock 4 or similars)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Usb">
            <summary>
            Gets if the controller is currently charging (intended for the DualShock 4, which has a value indicating if it is charging/connected to an usb cable)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Charging">
            <summary>
            Same as Usb property, but with a friendly name
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Axis">
            <summary>
            Readonly definition for Axis array for backwards compatibility with old remap Profiles
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Axes">
            <summary>
            Axes array containing all the axes of the controller
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Sliders">
            <summary>
            Sliders array containing all the sliders of the controller
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Buttons">
            <summary>
            Buttons array containing all the buttons of the controller
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Povs">
            <summary>
            POVs array containing all the POVs/D-Pads of the controller
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.SixAxis">
            <summary>
            SixAxis array containing all the IMU data of the controller
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Quaternions">
            <summary>
            Quaternions array containing IMU data quaternions of the controller
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.DeltaRotation">
            <summary>
            Gets the delta/diference of quaternion rotation from the last report
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Rotation">
            <summary>
            Gets the current total rotation of the controller as a quaternion
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Touch">
            <summary>
            Touches array containing all the finger touchs on the controller touchpad
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.TouchPadSize">
            <summary>
            Touchpad resolution as a 2D vector.
            </summary>
        </member>
        <member name="F:DSRemapper.Types.DSInputReport.deltaTime">
            <summary>
            Delta time from last report. Set by input plugins with the delta time used to calculate IMU data.
            This field can be always 0, if the input plugin doesn't update it.
            </summary>
        </member>
        <member name="M:DSRemapper.Types.DSInputReport.#ctor">
            <summary>
            DSInputReport class contructor
            </summary>
        </member>
        <member name="M:DSRemapper.Types.DSInputReport.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            DSInputReport class contructor
            </summary>
            <param name="axes">Number of axes for the structure</param>
            <param name="sliders">Number of sliders for the structure</param>
            <param name="buttons">Number of buttons for the structure</param>
            <param name="povs">Number of povs for the structure</param>
            <param name="touchs">Number of touch structures for the structure</param>
        </member>
        <member name="M:DSRemapper.Types.DSInputReport.SetAxis(System.Single[])">
            <summary>
            Definition for SetAxes function for backwards compatibility with old remap Profiles
            </summary>
        </member>
        <member name="M:DSRemapper.Types.DSInputReport.SetAxes(System.Single[])">
            <summary>
            Sets all axes to the shortest length between controller axes or input array
            </summary>
            <param name="axes">Axes array to set to the structure</param>
        </member>
        <member name="M:DSRemapper.Types.DSInputReport.SetSliders(System.Single[])">
            <summary>
            Sets all sliders to the shortest length between controller sliders or input array
            </summary>
            <param name="sliders">Sliders array to set to the structure</param>
        </member>
        <member name="M:DSRemapper.Types.DSInputReport.SetButtons(System.Boolean[])">
            <summary>
            Sets all buttons to the shortest length between controller buttons or input array
            </summary>
            <param name="buttons">Buttons array to set to the structure</param>
        </member>
        <member name="M:DSRemapper.Types.DSInputReport.SetButtons(System.Boolean[],System.Int32,System.Int32)">
            <summary>
            Sets all buttons from the offset index to the length index or the final index of the controller buttons array (if the length is over the input array length will result in an error)
            </summary>
            <param name="buttons">Buttons array to set to the structure</param>
            <param name="offset">Starting index</param>
            <param name="length">Final index</param>
        </member>
        <member name="M:DSRemapper.Types.DSInputReport.SetPovs(DSRemapper.Types.DSPov[])">
            <summary>
            Sets all POVs to the shortest length between controller POVs or input array
            </summary>
            <param name="povs">POVs array to set to the structure</param>
        </member>
        <member name="M:DSRemapper.Types.DSInputReport.SetTouchPads(DSRemapper.Types.DSTouch[])">
            <summary>
            Sets all touches to the shortest length between controller touches or input array
            </summary>
            <param name="touch">Touches array to set to the structure</param>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.LX">
            <summary>
            Left Stick X Axis (for DS4 and Xbox)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.LY">
            <summary>
            Left Stick Y Axis (for DS4 and Xbox)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.RX">
            <summary>
            Right Stick X Axis (for DS4 and Xbox)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.RY">
            <summary>
            Right Stick Y Axis (for DS4 and Xbox)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.LTrigger">
            <summary>
            Left Trigger Axis (for DS4 and Xbox)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.RTrigger">
            <summary>
            Right Trigger Axis (for DS4 and Xbox)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Pov">
            <summary>
            Controller main/first POV/D-Pad
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Up">
            <summary>
            Controller main/first POV up button
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Right">
            <summary>
            Controller main/first POV right button
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Down">
            <summary>
            Controller main/first POV down button
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Left">
            <summary>
            Controller main/first POV left button
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Square">
            <summary>
            DualShock 4 Square button (index on the buttons array: 0)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Cross">
            <summary>
            DualShock 4 Cross button (index on the buttons array: 1)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Circle">
            <summary>
            DualShock 4 Circle button (index on the buttons array: 2)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Triangle">
            <summary>
            DualShock 4 Triangle button (index on the buttons array: 3)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.L1">
            <summary>
            DualShock 4 L1 button (index on the buttons array: 4)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.R1">
            <summary>
            DualShock 4 R1 button (index on the buttons array: 5)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.L2">
            <summary>
            DualShock 4 L2 button (index on the buttons array: 6)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.R2">
            <summary>
            DualShock 4 R2 button (index on the buttons array: 7)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Share">
            <summary>
            DualShock 4 Share button (index on the buttons array: 8)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Options">
            <summary>
            DualShock 4 Options button (index on the buttons array: 9)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.L3">
            <summary>
            DualShock 4 L3 button (index on the buttons array: 10)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.R3">
            <summary>
            DualShock 4 R3 button (index on the buttons array: 11)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.PS">
            <summary>
            DualShock 4 PS button (index on the buttons array: 12)
            Be careful, if the button is pressed for 10 seconds the DualShock 4 controller will shutdown.
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.TouchPad">
            <summary>
            DualShock 4 Touch Pad button (index on the buttons array: 13)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.TouchClick">
            <summary>
            Same as Touch Pad button (index on the buttons array: 13). Is declared for backwards compatibility
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.X">
            <summary>
            Xbox X button (index on the buttons array: 0)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.A">
            <summary>
            Xbox A button (index on the buttons array: 1)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.B">
            <summary>
            Xbox B button (index on the buttons array: 2)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Y">
            <summary>
            Xbox Y button (index on the buttons array: 3)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.LButton">
            <summary>
            Xbox Left Button button (index on the buttons array: 4)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.RButton">
            <summary>
            Xbox Right Button button (index on the buttons array: 5)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Back">
            <summary>
            Xbox Back button (index on the buttons array: 8)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Start">
            <summary>
            Xbox Start button (index on the buttons array: 9)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.LThumb">
            <summary>
            Xbox Left Thumb button (index on the buttons array: 10)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.RThumb">
            <summary>
            Xbox Right Thumb button (index on the buttons array: 11)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Guide">
            <summary>
            Xbox Guide button (index on the buttons array: 12)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.RawAccel">
            <summary>
            Raw Acceleration data (with gravity) from IMU data (index on SixAxis array: 0)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Gyro">
            <summary>
            Raw Gyro data from IMU data (index on SixAxis array: 1)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Grav">
            <summary>
            Gravity vector from IMU data (index on SixAxis array: 2)
            Points to the "global/planet" gravity relative to the controller.
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSInputReport.Accel">
            <summary>
            Processed Acceleration data (without gravity and fixed) from IMU data (index on SixAxis array: 3)
            Rotation of the controller is irrelevant to this value. If the controller is turned 90 degrees, and is moved left to right, in this vector it will still be on the X axis.
            </summary>
        </member>
        <member name="T:DSRemapper.Types.DSOutputReport">
            <summary>
            Standardization of output report for DSRemapper plugins framework. Is used for DSRemapper remap profiles as well.
            </summary>
        </member>
        <member name="F:DSRemapper.Types.DSOutputReport.defaulLedIntensity">
            <summary>
            Constant for default DualShock 4 ligth bar intensity
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSOutputReport.Rumble">
            <summary>
            Motor rumble array for controller vibration. It's functionality may vary depending on how the plugins use it.
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSOutputReport.Led">
            <summary>
            DSLight class representing DualShock 4 light bar
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSOutputReport.ExtLeds">
            <summary>
            Extension values for leds. It's functionality may vary depending on how the plugins use it.
            </summary>
        </member>
        <member name="M:DSRemapper.Types.DSOutputReport.#ctor">
            <summary>
            DSOutputReport class constructor
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSOutputReport.Right">
            <summary>
            Right rumble motor of the controller (index on rumble array: 0)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSOutputReport.Left">
            <summary>
            Left rumble motor of the controller (index on rumble array: 1)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSOutputReport.Weak">
            <summary>
            Weak/right rumble motor of a DualShock 4 controller (index on rumble array: 0)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSOutputReport.Strong">
            <summary>
            Strong/left rumble motor of a DualShock 4 controller (index on rumble array: 1)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSOutputReport.Red">
            <summary>
            Red led value for the DualShock 4 light bar (range: 0-1)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSOutputReport.Green">
            <summary>
            Green led value for the DualShock 4 light bar (range: 0-1)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSOutputReport.Blue">
            <summary>
            Blue led value for the DualShock 4 light bar (range: 0-1)
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSOutputReport.OnTime">
            <summary>
            On time percentage for the DualShock 4 light bar (range: 0-1)
            If this property and 'OffTime' property are both 0, light bar is always on.
            </summary>
        </member>
        <member name="P:DSRemapper.Types.DSOutputReport.OffTime">
            <summary>
            Off time percentage for the DualShock 4 light bar (range: 0-1)
            If this property and 'OnTime' property are both 0, light bar is always on.
            </summary>
        </member>
    </members>
</doc>
